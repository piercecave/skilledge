{"ast":null,"code":"var _jsxFileName = \"/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/UserDashboard.js\";\nimport React from 'react';\nimport './UserDashboard.css';\nimport Calendar from './Calendar';\nimport Record from './Record';\nimport SleepReporter from './SleepReporter';\nimport MoodReporter from './MoodReporter';\nexport class UserDashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formatDate = currentDate => {\n      var newYear = currentDate.getFullYear();\n      var newMonth = currentDate.getMonth() + 1;\n      var newDate = currentDate.getDate();\n      if (newMonth < 10) newMonth = \"0\" + newMonth;\n      if (newDate < 10) newDate = \"0\" + newDate;\n      return newYear + \"-\" + newMonth + \"-\" + newDate;\n    };\n\n    this.onlyUnique = (value, index, self) => {\n      return self.indexOf(value) === index;\n    };\n\n    this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n    this.GET_REASONS_URL = process.env.REACT_APP_BACKEND_URL + \"/events/:eventid/reasons\";\n    this.GET_EVENTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events/:date\";\n    this.GET_SLEEP_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/sleep-reports/:date\";\n    this.GET_MOOD_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/mood-reports/:date\";\n    this.previousDay = this.previousDay.bind(this);\n    this.nextDay = this.nextDay.bind(this);\n    this.changeDate = this.changeDate.bind(this);\n    this.eventUpdated = this.eventUpdated.bind(this);\n    this.sleepUpdated = this.sleepUpdated.bind(this);\n    this.moodUpdated = this.moodUpdated.bind(this);\n    this.state = {\n      currentDate: new Date(),\n      eventUpdatedSwitch: false,\n      eventsData: [],\n      eventDates: [],\n      recordEvents: [],\n      currentSleepReport: [],\n      currentMoodReport: []\n    };\n  }\n\n  componentDidMount() {\n    this.loadEvents();\n  }\n\n  previousDay() {\n    var negativeOneDayInMilliseconds = -1 * 24 * 60 * 60 * 1000;\n    this.updateCurrentDateBy(negativeOneDayInMilliseconds);\n  }\n\n  nextDay() {\n    var positiveOneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    this.updateCurrentDateBy(positiveOneDayInMilliseconds);\n  }\n\n  updateCurrentDateBy(milliseconds) {\n    this.setState(prevState => {\n      var newCurrentDate = new Date();\n      newCurrentDate.setTime(prevState.currentDate.getTime() + milliseconds);\n      return {\n        currentDate: newCurrentDate\n      };\n    }, this.loadEvents);\n  }\n\n  changeDate(newDate) {\n    this.setState({\n      currentDate: newDate\n    }, this.loadEventsForCurrentDate);\n  }\n\n  loadEvents() {\n    fetch(this.GET_EVENTS_FOR_USER_URL, {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        eventsData: responseJSON.map(function (event) {\n          event.FormattedEventDate = event.EventDate.substring(0, 10);\n          return event;\n        }),\n        eventDates: Array.from(responseJSON, event => event.EventDate.substring(0, 10)).filter(this.onlyUnique)\n      }, this.loadEventsForCurrentDate);\n    }).catch(this.displayError);\n  }\n\n  loadEventsForCurrentDate() {\n    const formatedCurrentDate = this.formatDate(this.state.currentDate);\n    fetch(this.GET_EVENTS_FOR_DATE_URL.replace(\":date\", formatedCurrentDate), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        recordEvents: responseJSON\n      }, this.getAllReasonsForAllEvents);\n    }).catch(this.displayError);\n  }\n\n  async getAllReasonsForAllEvents() {\n    let newEvents = this.state.recordEvents;\n\n    for (const event of this.state.recordEvents) {\n      event.Reasons = await this.fetchReasons(event.EventID);\n    }\n\n    this.setState({\n      recordEvents: newEvents\n    }, this.loadSleepReports);\n  }\n\n  async fetchReasons(eventid) {\n    return await fetch(this.GET_REASONS_URL.replace(\":eventid\", eventid), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).catch(this.displayError);\n  }\n\n  eventUpdated() {\n    // setTimeout(() => {\n    //     this.loadEvents();\n    // }, 100);\n    this.loadEvents();\n  }\n\n  sleepUpdated() {\n    this.loadSleepReports();\n  }\n\n  loadSleepReports() {\n    const formattedCurrentDate = this.formatDate(this.state.currentDate);\n    fetch(this.GET_SLEEP_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        currentSleepReport: responseJSON\n      }, this.loadMoodReports);\n    }).catch(this.displayError);\n  }\n\n  moodUpdated() {\n    this.loadMoodReports();\n  }\n\n  loadMoodReports() {\n    const formattedCurrentDate = this.formatDate(this.state.currentDate);\n    fetch(this.GET_MOOD_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        currentMoodReport: responseJSON\n      });\n    }).catch(this.displayError);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"componentsContainer\",\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      changeDate: this.changeDate,\n      eventsData: this.state.eventsData,\n      eventDates: this.state.eventDates,\n      currentDate: this.state.currentDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card record-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Record, {\n      currentDate: this.state.currentDate,\n      events: this.state.recordEvents,\n      previousDay: this.previousDay,\n      nextDay: this.nextDay,\n      eventUpdated: this.eventUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SleepReporter, {\n      currentDate: this.formatDate(this.state.currentDate),\n      currentSleepReport: this.state.currentSleepReport,\n      sleepUpdated: this.sleepUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MoodReporter, {\n      currentDate: this.formatDate(this.state.currentDate),\n      currentMoodReport: this.state.currentMoodReport,\n      moodUpdated: this.moodUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\nexport default UserDashboard;","map":{"version":3,"sources":["/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/UserDashboard.js"],"names":["React","Calendar","Record","SleepReporter","MoodReporter","UserDashboard","Component","constructor","props","formatDate","currentDate","newYear","getFullYear","newMonth","getMonth","newDate","getDate","onlyUnique","value","index","self","indexOf","GET_EVENTS_FOR_USER_URL","process","env","REACT_APP_BACKEND_URL","GET_REASONS_URL","GET_EVENTS_FOR_DATE_URL","GET_SLEEP_REPORTS_FOR_DATE_URL","GET_MOOD_REPORTS_FOR_DATE_URL","previousDay","bind","nextDay","changeDate","eventUpdated","sleepUpdated","moodUpdated","state","Date","eventUpdatedSwitch","eventsData","eventDates","recordEvents","currentSleepReport","currentMoodReport","componentDidMount","loadEvents","negativeOneDayInMilliseconds","updateCurrentDateBy","positiveOneDayInMilliseconds","milliseconds","setState","prevState","newCurrentDate","setTime","getTime","loadEventsForCurrentDate","fetch","credentials","then","checkStatus","response","json","responseJSON","map","event","FormattedEventDate","EventDate","substring","Array","from","filter","catch","displayError","formatedCurrentDate","replace","getAllReasonsForAllEvents","newEvents","Reasons","fetchReasons","EventID","loadSleepReports","eventid","formattedCurrentDate","loadMoodReports","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './UserDashboard.css';\nimport Calendar from './Calendar';\nimport Record from './Record';\nimport SleepReporter from './SleepReporter';\nimport MoodReporter from './MoodReporter';\n\nexport class UserDashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n        this.GET_REASONS_URL = process.env.REACT_APP_BACKEND_URL + \"/events/:eventid/reasons\";\n        this.GET_EVENTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events/:date\";\n        this.GET_SLEEP_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/sleep-reports/:date\";\n        this.GET_MOOD_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/mood-reports/:date\";\n\n        this.previousDay = this.previousDay.bind(this);\n        this.nextDay = this.nextDay.bind(this);\n        this.changeDate = this.changeDate.bind(this);\n        this.eventUpdated = this.eventUpdated.bind(this);\n        this.sleepUpdated = this.sleepUpdated.bind(this);\n        this.moodUpdated = this.moodUpdated.bind(this);\n\n        this.state = {\n            currentDate: new Date(),\n            eventUpdatedSwitch: false,\n            eventsData: [],\n            eventDates: [],\n            recordEvents: [],\n            currentSleepReport: [],\n            currentMoodReport: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadEvents();\n    }\n\n    previousDay() {\n        var negativeOneDayInMilliseconds = -1 * 24 * 60 * 60 * 1000;\n        this.updateCurrentDateBy(negativeOneDayInMilliseconds)\n    }\n\n    nextDay() {\n        var positiveOneDayInMilliseconds = 24 * 60 * 60 * 1000;\n        this.updateCurrentDateBy(positiveOneDayInMilliseconds)\n    }\n\n    updateCurrentDateBy(milliseconds) {\n        this.setState((prevState) => {\n            var newCurrentDate = new Date();\n            newCurrentDate.setTime(prevState.currentDate.getTime() + milliseconds);\n            return {\n                currentDate: newCurrentDate\n            }\n        }, this.loadEvents);\n    }\n\n    changeDate(newDate) {\n        this.setState({\n            currentDate: newDate\n        }, this.loadEventsForCurrentDate)\n    }\n\n    loadEvents() {\n        fetch(this.GET_EVENTS_FOR_USER_URL, {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    eventsData: responseJSON.map(function (event) {\n                        event.FormattedEventDate = event.EventDate.substring(0, 10);\n                        return event;\n                    }),\n                    eventDates: Array.from(responseJSON, event => event.EventDate.substring(0, 10)).filter(this.onlyUnique)\n                }, this.loadEventsForCurrentDate);\n            })\n            .catch(this.displayError);\n    }\n\n    loadEventsForCurrentDate() {\n\n        const formatedCurrentDate = this.formatDate(this.state.currentDate);\n\n        fetch(this.GET_EVENTS_FOR_DATE_URL.replace(\":date\", formatedCurrentDate), {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    recordEvents: responseJSON\n                }, this.getAllReasonsForAllEvents);\n            })\n            .catch(this.displayError);\n    }\n\n    formatDate = (currentDate) => {\n        var newYear = currentDate.getFullYear();\n        var newMonth = currentDate.getMonth() + 1;\n        var newDate = currentDate.getDate();\n        if (newMonth < 10) newMonth = \"0\" + newMonth;\n        if (newDate < 10) newDate = \"0\" + newDate;\n        return newYear + \"-\" + newMonth + \"-\" + newDate;\n    }\n\n    async getAllReasonsForAllEvents() {\n        let newEvents = this.state.recordEvents;\n        for (const event of this.state.recordEvents) {\n            event.Reasons = await this.fetchReasons(event.EventID);\n        }\n        this.setState({\n            recordEvents: newEvents\n        }, this.loadSleepReports);\n    }\n\n    async fetchReasons(eventid) {\n        return await fetch(this.GET_REASONS_URL.replace(\":eventid\", eventid), {\n            credentials: 'include',\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json()\n            })\n            .catch(this.displayError);\n    }\n\n    onlyUnique = (value, index, self) => {\n        return self.indexOf(value) === index;\n    }\n\n    eventUpdated() {\n        // setTimeout(() => {\n        //     this.loadEvents();\n        // }, 100);\n        this.loadEvents();\n    }\n\n    sleepUpdated() {\n        this.loadSleepReports();\n    }\n\n    loadSleepReports() {\n        const formattedCurrentDate = this.formatDate(this.state.currentDate);\n\n        fetch(this.GET_SLEEP_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    currentSleepReport: responseJSON\n                }, this.loadMoodReports);\n            })\n            .catch(this.displayError);\n    }\n\n    moodUpdated() {\n        this.loadMoodReports();\n    }\n\n    loadMoodReports() {\n        const formattedCurrentDate = this.formatDate(this.state.currentDate);\n\n        fetch(this.GET_MOOD_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    currentMoodReport: responseJSON\n                });\n            })\n            .catch(this.displayError);\n    }\n\n    render() {\n\n        return (\n            <div id=\"componentsContainer\" className=\"container\">\n                <div className=\"row mt-4\">\n                    <div className=\"col-sm\">\n                        <div className=\"card\">\n                            <Calendar changeDate={this.changeDate} eventsData={this.state.eventsData} eventDates={this.state.eventDates} currentDate={this.state.currentDate} />\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <div className=\"card record-card\">\n                            <Record currentDate={this.state.currentDate} events={this.state.recordEvents} previousDay={this.previousDay} nextDay={this.nextDay} eventUpdated={this.eventUpdated} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row mt-1\">\n                    <div className=\"col-sm\">\n                        <div className=\"card\">\n                            <SleepReporter currentDate={this.formatDate(this.state.currentDate)} currentSleepReport={this.state.currentSleepReport} sleepUpdated={this.sleepUpdated} />\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                    <div className=\"card\">\n                            <MoodReporter currentDate={this.formatDate(this.state.currentDate)} currentMoodReport={this.state.currentMoodReport} moodUpdated={this.moodUpdated} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserDashboard;"]},"metadata":{},"sourceType":"module"}