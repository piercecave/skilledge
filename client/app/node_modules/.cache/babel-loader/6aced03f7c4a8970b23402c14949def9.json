{"ast":null,"code":"var _jsxFileName = \"/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/ChartsPage.js\";\nimport React from 'react';\nimport './ChartsPage.css';\nimport { Header } from './Header';\nimport SuccessRateVsTimeChart from './SuccessRateVsTimeChart';\nimport CommonReasonsForFailureChart from './CommonReasonsForFailureChart';\nexport class ChartsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    document.title = 'Charts';\n    this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n    this.state = {\n      currentDate: new Date(),\n      eventsData: []\n    };\n  } // componentDidMount() {\n  //     // this.loadEvents();\n  //     window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  // }\n  // componentWillUnmount() {\n  //     window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  // }\n  // updateDimensions() {\n  //     this.setState({\n  //         chartWidth: 600,\n  //         chartHeight: 480\n  //     });\n  // }\n\n\n  loadEvents() {\n    fetch(this.GET_EVENTS_FOR_USER_URL, {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON);\n      this.setState({\n        eventsData: responseJSON\n      });\n    }).catch(this.displayError);\n  }\n\n  displayError(error) {\n    console.log(error);\n  }\n\n  formatDateForDB(currentDate) {\n    var newYear = currentDate.getFullYear();\n    var newMonth = currentDate.getMonth() + 1;\n    var newDate = currentDate.getDate();\n    if (newMonth < 10) newMonth = \"0\" + newMonth;\n    if (newDate < 10) newDate = \"0\" + newDate;\n    return newYear + \"-\" + newMonth + \"-\" + newDate;\n  }\n\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      return Promise.reject(new Error(response.status + \": \" + response.statusText));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"CalendarPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"successRateChartContainer\",\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card  my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(SuccessRateVsTimeChart, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card  my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CommonReasonsForFailureChart, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\nexport default ChartsPage;","map":{"version":3,"sources":["/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/ChartsPage.js"],"names":["React","Header","SuccessRateVsTimeChart","CommonReasonsForFailureChart","ChartsPage","Component","constructor","props","document","title","GET_EVENTS_FOR_USER_URL","process","env","REACT_APP_BACKEND_URL","state","currentDate","Date","eventsData","loadEvents","fetch","credentials","then","checkStatus","response","json","responseJSON","console","log","setState","catch","displayError","error","formatDateForDB","newYear","getFullYear","newMonth","getMonth","newDate","getDate","status","Promise","reject","Error","statusText","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './ChartsPage.css';\nimport { Header } from './Header';\nimport SuccessRateVsTimeChart from './SuccessRateVsTimeChart';\nimport CommonReasonsForFailureChart from './CommonReasonsForFailureChart';\n\nexport class ChartsPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        document.title = 'Charts';\n\n        this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n\n        this.state = {\n            currentDate: new Date(),\n            eventsData: []\n        }\n    }\n\n    // componentDidMount() {\n    //     // this.loadEvents();\n    //     window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    // }\n\n    // componentWillUnmount() {\n    //     window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n    // }\n\n    // updateDimensions() {\n    //     this.setState({\n    //         chartWidth: 600,\n    //         chartHeight: 480\n    //     });\n    // }\n\n    loadEvents() {\n\n        fetch(this.GET_EVENTS_FOR_USER_URL, {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                console.log(responseJSON)\n                this.setState({\n                    eventsData: responseJSON\n                });\n            })\n            .catch(this.displayError);\n    }\n\n    displayError(error) {\n        console.log(error);\n    }\n\n    formatDateForDB(currentDate) {\n        var newYear = currentDate.getFullYear();\n        var newMonth = currentDate.getMonth() + 1;\n        var newDate = currentDate.getDate();\n        if (newMonth < 10) newMonth = \"0\" + newMonth;\n        if (newDate < 10) newDate = \"0\" + newDate;\n        return newYear + \"-\" + newMonth + \"-\" + newDate;\n    }\n\n    checkStatus(response) {\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        } else {\n            return Promise.reject(new Error(response.status + \": \" + response.statusText));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"CalendarPage\">\n                <Header />\n                <div id=\"successRateChartContainer\" className=\"container\">\n                    <div className=\"card  my-3\">\n                        <SuccessRateVsTimeChart />\n                    </div>\n                    <div className=\"card  my-3\">\n                        <CommonReasonsForFailureChart />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ChartsPage;"]},"metadata":{},"sourceType":"module"}