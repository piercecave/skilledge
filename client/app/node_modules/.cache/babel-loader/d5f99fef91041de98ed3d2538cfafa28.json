{"ast":null,"code":"var _jsxFileName = \"/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/UserDashboard.js\";\nimport React from 'react';\nimport './UserDashboard.css';\nimport Calendar from './Calendar';\nimport Record from './Record';\nimport SleepReporter from './SleepReporter';\nimport MoodReporter from './MoodReporter';\nimport DashboardHeader from './DashboardHeader';\nimport Game from './Game';\nexport class UserDashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formatDate = currentDate => {\n      var newYear = currentDate.getFullYear();\n      var newMonth = currentDate.getMonth() + 1;\n      var newDate = currentDate.getDate();\n      if (newMonth < 10) newMonth = \"0\" + newMonth;\n      if (newDate < 10) newDate = \"0\" + newDate;\n      return newYear + \"-\" + newMonth + \"-\" + newDate;\n    };\n\n    this.onlyUnique = (value, index, self) => {\n      return self.indexOf(value) === index;\n    };\n\n    this.GET_USER_INFO_URL = process.env.REACT_APP_BACKEND_URL + \"/users\";\n    this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n    this.GET_REASONS_URL = process.env.REACT_APP_BACKEND_URL + \"/events/:eventid/reasons\";\n    this.GET_EVENTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events/:date\";\n    this.GET_SLEEP_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/sleep-reports/:date\";\n    this.GET_MOOD_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/mood-reports/:date\";\n    this.previousDay = this.previousDay.bind(this);\n    this.nextDay = this.nextDay.bind(this);\n    this.changeDate = this.changeDate.bind(this);\n    this.eventUpdated = this.eventUpdated.bind(this);\n    this.sleepUpdated = this.sleepUpdated.bind(this);\n    this.moodUpdated = this.moodUpdated.bind(this);\n    this.state = {\n      currentDate: new Date(),\n      eventUpdatedSwitch: false,\n      eventsData: [],\n      eventDates: [],\n      userInfo: {},\n      recordEvents: [],\n      currentSleepReport: [],\n      currentMoodReport: []\n    };\n  }\n\n  componentDidMount() {\n    this.loadEvents();\n  }\n\n  previousDay() {\n    var negativeOneDayInMilliseconds = -1 * 24 * 60 * 60 * 1000;\n    this.updateCurrentDateBy(negativeOneDayInMilliseconds);\n  }\n\n  nextDay() {\n    var positiveOneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    this.updateCurrentDateBy(positiveOneDayInMilliseconds);\n  }\n\n  updateCurrentDateBy(milliseconds) {\n    this.setState(prevState => {\n      var newCurrentDate = new Date();\n      newCurrentDate.setTime(prevState.currentDate.getTime() + milliseconds);\n      return {\n        currentDate: newCurrentDate\n      };\n    }, this.loadEvents);\n  }\n\n  changeDate(newDate) {\n    this.setState({\n      currentDate: newDate\n    }, this.loadEventsForCurrentDate);\n  }\n\n  loadEvents() {\n    fetch(this.GET_EVENTS_FOR_USER_URL, {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState(() => {\n        return {\n          eventsData: responseJSON.map(function (event) {\n            event.FormattedEventDate = event.EventDate.substring(0, 10);\n            return event;\n          }),\n          eventDates: Array.from(responseJSON, event => event.EventDate.substring(0, 10)).filter(this.onlyUnique)\n        };\n      }, this.loadEventsForCurrentDate);\n    }).catch(this.displayError);\n  }\n\n  loadEventsForCurrentDate() {\n    const formatedCurrentDate = this.formatDate(this.state.currentDate);\n    fetch(this.GET_EVENTS_FOR_DATE_URL.replace(\":date\", formatedCurrentDate), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        recordEvents: responseJSON\n      }, this.getAllReasonsForAllEvents);\n    }).catch(this.displayError);\n  }\n\n  loadUserInfo() {\n    fetch(this.GET_USER_INFO_URL, {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        userInfo: responseJSON[0]\n      });\n    }).catch(this.displayError);\n  }\n\n  async getAllReasonsForAllEvents() {\n    let newEvents = this.state.recordEvents;\n\n    for (const event of this.state.recordEvents) {\n      event.Reasons = await this.fetchReasons(event.EventID);\n    }\n\n    this.setState({\n      recordEvents: newEvents\n    }, this.loadSleepReports);\n  }\n\n  async fetchReasons(eventid) {\n    return await fetch(this.GET_REASONS_URL.replace(\":eventid\", eventid), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).catch(this.displayError);\n  }\n\n  eventUpdated() {\n    this.loadEvents();\n  }\n\n  sleepUpdated() {\n    this.loadSleepReports();\n  }\n\n  loadSleepReports() {\n    const formattedCurrentDate = this.formatDate(this.state.currentDate);\n    fetch(this.GET_SLEEP_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        currentSleepReport: responseJSON\n      }, this.loadMoodReports);\n    }).catch(this.displayError);\n  }\n\n  moodUpdated() {\n    this.loadMoodReports();\n  }\n\n  loadMoodReports() {\n    const formattedCurrentDate = this.formatDate(this.state.currentDate);\n    fetch(this.GET_MOOD_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        currentMoodReport: responseJSON\n      }, this.loadUserInfo);\n    }).catch(this.displayError);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"componentsContainer\",\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DashboardHeader, {\n      userInfo: this.state.userInfo,\n      currentDate: this.formatDate(this.state.currentDate),\n      eventsData: this.state.eventsData,\n      currentSleepReport: this.state.currentSleepReport,\n      currentMoodReport: this.state.currentMoodReport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      changeDate: this.changeDate,\n      eventsData: this.state.eventsData,\n      eventDates: this.state.eventDates,\n      currentDate: this.state.currentDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card record-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Record, {\n      currentDate: this.state.currentDate,\n      events: this.state.recordEvents,\n      previousDay: this.previousDay,\n      nextDay: this.nextDay,\n      eventUpdated: this.eventUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SleepReporter, {\n      currentDate: this.formatDate(this.state.currentDate),\n      currentSleepReport: this.state.currentSleepReport,\n      sleepUpdated: this.sleepUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MoodReporter, {\n      currentDate: this.formatDate(this.state.currentDate),\n      currentMoodReport: this.state.currentMoodReport,\n      moodUpdated: this.moodUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Game, {\n      ref: gameComponent => {\n        window.gameComponent = gameComponent;\n      },\n      eventsData: this.state.eventsData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\nexport default UserDashboard;","map":{"version":3,"sources":["/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/UserDashboard.js"],"names":["React","Calendar","Record","SleepReporter","MoodReporter","DashboardHeader","Game","UserDashboard","Component","constructor","props","formatDate","currentDate","newYear","getFullYear","newMonth","getMonth","newDate","getDate","onlyUnique","value","index","self","indexOf","GET_USER_INFO_URL","process","env","REACT_APP_BACKEND_URL","GET_EVENTS_FOR_USER_URL","GET_REASONS_URL","GET_EVENTS_FOR_DATE_URL","GET_SLEEP_REPORTS_FOR_DATE_URL","GET_MOOD_REPORTS_FOR_DATE_URL","previousDay","bind","nextDay","changeDate","eventUpdated","sleepUpdated","moodUpdated","state","Date","eventUpdatedSwitch","eventsData","eventDates","userInfo","recordEvents","currentSleepReport","currentMoodReport","componentDidMount","loadEvents","negativeOneDayInMilliseconds","updateCurrentDateBy","positiveOneDayInMilliseconds","milliseconds","setState","prevState","newCurrentDate","setTime","getTime","loadEventsForCurrentDate","fetch","credentials","then","checkStatus","response","json","responseJSON","map","event","FormattedEventDate","EventDate","substring","Array","from","filter","catch","displayError","formatedCurrentDate","replace","getAllReasonsForAllEvents","loadUserInfo","newEvents","Reasons","fetchReasons","EventID","loadSleepReports","eventid","formattedCurrentDate","loadMoodReports","render","gameComponent","window"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './UserDashboard.css';\nimport Calendar from './Calendar';\nimport Record from './Record';\nimport SleepReporter from './SleepReporter';\nimport MoodReporter from './MoodReporter';\nimport DashboardHeader from './DashboardHeader';\nimport Game from './Game';\n\nexport class UserDashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.GET_USER_INFO_URL = process.env.REACT_APP_BACKEND_URL + \"/users\";\n\n        this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n        this.GET_REASONS_URL = process.env.REACT_APP_BACKEND_URL + \"/events/:eventid/reasons\";\n        this.GET_EVENTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events/:date\";\n        this.GET_SLEEP_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/sleep-reports/:date\";\n        this.GET_MOOD_REPORTS_FOR_DATE_URL = process.env.REACT_APP_BACKEND_URL + \"/users/mood-reports/:date\";\n\n        this.previousDay = this.previousDay.bind(this);\n        this.nextDay = this.nextDay.bind(this);\n        this.changeDate = this.changeDate.bind(this);\n        this.eventUpdated = this.eventUpdated.bind(this);\n        this.sleepUpdated = this.sleepUpdated.bind(this);\n        this.moodUpdated = this.moodUpdated.bind(this);\n\n        this.state = {\n            currentDate: new Date(),\n            eventUpdatedSwitch: false,\n            eventsData: [],\n            eventDates: [],\n            userInfo: {},\n            recordEvents: [],\n            currentSleepReport: [],\n            currentMoodReport: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadEvents();\n    }\n\n    previousDay() {\n        var negativeOneDayInMilliseconds = -1 * 24 * 60 * 60 * 1000;\n        this.updateCurrentDateBy(negativeOneDayInMilliseconds)\n    }\n\n    nextDay() {\n        var positiveOneDayInMilliseconds = 24 * 60 * 60 * 1000;\n        this.updateCurrentDateBy(positiveOneDayInMilliseconds)\n    }\n\n    updateCurrentDateBy(milliseconds) {\n        this.setState((prevState) => {\n            var newCurrentDate = new Date();\n            newCurrentDate.setTime(prevState.currentDate.getTime() + milliseconds);\n            return {\n                currentDate: newCurrentDate\n            }\n        }, this.loadEvents);\n    }\n\n    changeDate(newDate) {\n        this.setState({\n            currentDate: newDate\n        }, this.loadEventsForCurrentDate)\n    }\n\n    loadEvents() {\n        fetch(this.GET_EVENTS_FOR_USER_URL, {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState(() => {\n                    return {\n                        eventsData: responseJSON.map(function (event) {\n                            event.FormattedEventDate = event.EventDate.substring(0, 10);\n                            return event;\n                        }),\n                        eventDates: Array.from(responseJSON, event => event.EventDate.substring(0, 10)).filter(this.onlyUnique)\n                    }\n                }, this.loadEventsForCurrentDate);\n            })\n            .catch(this.displayError);\n    }\n\n    loadEventsForCurrentDate() {\n\n        const formatedCurrentDate = this.formatDate(this.state.currentDate);\n\n        fetch(this.GET_EVENTS_FOR_DATE_URL.replace(\":date\", formatedCurrentDate), {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    recordEvents: responseJSON\n                }, this.getAllReasonsForAllEvents);\n            })\n            .catch(this.displayError);\n    }\n\n    loadUserInfo() {\n        fetch(this.GET_USER_INFO_URL, {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    userInfo: responseJSON[0]\n                });\n            })\n            .catch(this.displayError);\n    }\n\n    formatDate = (currentDate) => {\n        var newYear = currentDate.getFullYear();\n        var newMonth = currentDate.getMonth() + 1;\n        var newDate = currentDate.getDate();\n        if (newMonth < 10) newMonth = \"0\" + newMonth;\n        if (newDate < 10) newDate = \"0\" + newDate;\n        return newYear + \"-\" + newMonth + \"-\" + newDate;\n    }\n\n    async getAllReasonsForAllEvents() {\n        let newEvents = this.state.recordEvents;\n        for (const event of this.state.recordEvents) {\n            event.Reasons = await this.fetchReasons(event.EventID);\n        }\n        this.setState({\n            recordEvents: newEvents\n        }, this.loadSleepReports);\n    }\n\n    async fetchReasons(eventid) {\n        return await fetch(this.GET_REASONS_URL.replace(\":eventid\", eventid), {\n            credentials: 'include',\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json()\n            })\n            .catch(this.displayError);\n    }\n\n    onlyUnique = (value, index, self) => {\n        return self.indexOf(value) === index;\n    }\n\n    eventUpdated() {\n        this.loadEvents();\n    }\n\n    sleepUpdated() {\n        this.loadSleepReports();\n    }\n\n    loadSleepReports() {\n        const formattedCurrentDate = this.formatDate(this.state.currentDate);\n\n        fetch(this.GET_SLEEP_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    currentSleepReport: responseJSON\n                }, this.loadMoodReports);\n            })\n            .catch(this.displayError);\n    }\n\n    moodUpdated() {\n        this.loadMoodReports();\n    }\n\n    loadMoodReports() {\n        const formattedCurrentDate = this.formatDate(this.state.currentDate);\n\n        fetch(this.GET_MOOD_REPORTS_FOR_DATE_URL.replace(\":date\", formattedCurrentDate), {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    currentMoodReport: responseJSON\n                }, this.loadUserInfo);\n            })\n            .catch(this.displayError);\n    }\n\n    render() {\n\n        return (\n            <div id=\"componentsContainer\" className=\"container\">\n                <div className=\"row mt-4\">\n                    <div className=\"col-sm\">\n                        <div className=\"card\">\n                            <DashboardHeader \n                                userInfo={this.state.userInfo} \n                                currentDate={this.formatDate(this.state.currentDate)}\n                                eventsData={this.state.eventsData}\n                                currentSleepReport={this.state.currentSleepReport}\n                                currentMoodReport={this.state.currentMoodReport} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row mt-1\">\n                    <div className=\"col-sm\">\n                        <div className=\"card\">\n                            <Calendar changeDate={this.changeDate} \n                                eventsData={this.state.eventsData} \n                                eventDates={this.state.eventDates} \n                                currentDate={this.state.currentDate} />\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <div className=\"card record-card\">\n                            <Record currentDate={this.state.currentDate} \n                                events={this.state.recordEvents} \n                                previousDay={this.previousDay} \n                                nextDay={this.nextDay} \n                                eventUpdated={this.eventUpdated} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row mt-1\">\n                    <div className=\"col-sm\">\n                        <div className=\"card\">\n                            <SleepReporter \n                                currentDate={this.formatDate(this.state.currentDate)} \n                                currentSleepReport={this.state.currentSleepReport} \n                                sleepUpdated={this.sleepUpdated} />\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <div className=\"card\">\n                            <MoodReporter \n                                currentDate={this.formatDate(this.state.currentDate)} \n                                currentMoodReport={this.state.currentMoodReport} \n                                moodUpdated={this.moodUpdated} />\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <div className=\"card\">\n                            <Game \n                                ref={(gameComponent) => { window.gameComponent = gameComponent }} \n                                eventsData={this.state.eventsData} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserDashboard;"]},"metadata":{},"sourceType":"module"}