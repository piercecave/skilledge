{"ast":null,"code":"var _jsxFileName = \"/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/SuccessRateVsTimeChart.js\";\nimport React from 'react';\nimport * as d3 from \"d3\";\nexport class SuccessRateVsTimeChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n    this.chartContainer = React.createRef();\n    this.state = {\n      eventsData: [],\n      chartWidth: 400\n    };\n  }\n\n  componentDidMount() {\n    this.loadEvents();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    this.setState({\n      chartWidth: this.chartContainer.current.offsetWidth\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  componentDidUpdate() {\n    this.clearOldChart();\n    this.createChart();\n  }\n\n  updateDimensions() {\n    this.setState({\n      chartWidth: this.chartContainer.current.offsetWidth\n    });\n  }\n\n  loadEvents() {\n    fetch(this.GET_EVENTS_FOR_USER_URL, {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      this.setState({\n        eventsData: responseJSON\n      });\n    }).catch(this.displayError);\n  }\n\n  createChart() {\n    let chartData = this.parseEventsData();\n    let chartDimensions = this.calculateChartDimensions();\n    let chart = this.createChartElement(chartDimensions);\n    let scales = this.calculateScales(chartData, chartDimensions);\n    this.createXAxis(chart, chartData, chartDimensions, scales.xScale);\n    this.createYAxis(chart, chartDimensions, scales.yScale);\n    this.createTrendLine(chart, scales, chartData);\n  }\n\n  parseEventsData() {\n    let eventsData = this.getEventsWithResults();\n    eventsData = this.orderEventsByDate(eventsData);\n    eventsData = this.calculateRollingTotalSuccessRate(eventsData);\n    return eventsData;\n  }\n\n  getEventsWithResults() {\n    return this.state.eventsData.filter(event => event.ResultName !== \"Pending\");\n  }\n\n  orderEventsByDate(eventsData) {\n    eventsData = eventsData.map(event => {\n      event.EventDate = new Date(event.EventDate);\n      return event;\n    });\n    eventsData.sort((a, b) => a.EventDate - b.EventDate);\n    return eventsData;\n  }\n\n  calculateRollingTotalSuccessRate(eventsData) {\n    var totalSuccesses = 0,\n        totalEvents = 0;\n    var cumulativeEventsData = eventsData.map(event => {\n      if (event.ResultName === \"Success\") {\n        totalSuccesses++;\n      }\n\n      totalEvents++;\n      event.SuccessRate = totalSuccesses / totalEvents * 100;\n      return event;\n    });\n    return cumulativeEventsData;\n  }\n\n  calculateChartDimensions() {\n    let margin = this.calcMargins();\n    let width = this.state.chartWidth - margin.left - margin.right;\n    let height = width * .75 - margin.top - margin.bottom;\n\n    if (this.state.chartWidth < 500) {\n      height = width * 1.2 - margin.top - margin.bottom;\n    }\n\n    return {\n      width: width,\n      height: height,\n      margin: margin\n    };\n  }\n\n  calcMargins() {\n    if (this.state.chartWidth < 500) {\n      return {\n        top: 10,\n        right: 60,\n        bottom: 90,\n        left: 45\n      };\n    }\n\n    return {\n      top: 10,\n      right: 60,\n      bottom: 90,\n      left: 60\n    };\n  }\n\n  clearOldChart() {\n    d3.select(\"#successRateChart\").html(\"\");\n  }\n\n  createChartElement(chartDimensions) {\n    return d3.select(\"#successRateChart\").append(\"svg\").attr(\"width\", chartDimensions.width + chartDimensions.margin.left + chartDimensions.margin.right).attr(\"height\", chartDimensions.height + chartDimensions.margin.top + chartDimensions.margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + chartDimensions.margin.left + \",\" + chartDimensions.margin.top + \")\");\n  }\n\n  calculateScales(chartData, chartDimensions) {\n    let xScale = this.createXScale(chartData, chartDimensions);\n    let yScale = this.createYScale(chartData, chartDimensions);\n    return {\n      xScale: xScale,\n      yScale: yScale\n    };\n  }\n\n  createXScale(cumulativeEventsData, chartDimensions) {\n    return d3.scaleTime().domain(d3.extent(cumulativeEventsData, function (d) {\n      return d.EventDate;\n    })).range([0, chartDimensions.width]);\n  }\n\n  createYScale(cumulativeEventsData, chartDimensions) {\n    return d3.scaleLinear().domain([0, d3.max(cumulativeEventsData, function (d) {\n      return +d.SuccessRate;\n    }) + 10]).range([chartDimensions.height, 0]);\n  }\n\n  createXAxis(chart, cumulativeEventsData, chartDimensions, xScale) {\n    chart.append(\"g\").attr(\"transform\", \"translate(0,\" + chartDimensions.height + \")\").call(d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\")).ticks(cumulativeEventsData.length + 1)).selectAll(\"text\").style(\"text-anchor\", \"end\").attr(\"dx\", \"-.8em\").attr(\"dy\", \".15em\").attr(\"transform\", \"rotate(-65)\");\n    this.createXAxisLabel(chart, chartDimensions);\n  }\n\n  createXAxisLabel(chart, chartDimensions) {\n    chart.append(\"text\").attr(\"transform\", \"translate(\" + chartDimensions.width / 2 + \" ,\" + (chartDimensions.height + chartDimensions.margin.top + chartDimensions.margin.bottom - 24) + \")\").style(\"text-anchor\", \"middle\").text(\"Date\").attr(\"font-size\", this.calcLabelFontSize());\n  }\n\n  createYAxis(chart, chartDimensions, yScale) {\n    chart.append(\"g\").call(d3.axisLeft(yScale));\n    this.createYAxisLabel(chart, chartDimensions);\n  }\n\n  createYAxisLabel(chart, chartDimensions) {\n    chart.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - chartDimensions.margin.left).attr(\"x\", 0 - chartDimensions.height / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Success Rate (%)\").attr(\"font-size\", this.calcLabelFontSize());\n  }\n\n  calcLabelFontSize() {\n    if (this.state.chartWidth < 500) {\n      return \"10px\";\n    }\n\n    return \"16px\";\n  }\n\n  createTrendLine(chart, scales, cumulativeEventsData) {\n    chart.append(\"path\").datum(cumulativeEventsData).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 4).attr(\"d\", d3.line().x(function (d) {\n      return scales.xScale(d.EventDate);\n    }).y(function (d) {\n      return scales.yScale(d.SuccessRate);\n    }).curve(d3.curveCardinal));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartContainer,\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, \"Success Rate / Time\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      id: \"successRateChart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default SuccessRateVsTimeChart;","map":{"version":3,"sources":["/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/SuccessRateVsTimeChart.js"],"names":["React","d3","SuccessRateVsTimeChart","Component","constructor","props","GET_EVENTS_FOR_USER_URL","process","env","REACT_APP_BACKEND_URL","chartContainer","createRef","state","eventsData","chartWidth","componentDidMount","loadEvents","window","addEventListener","updateDimensions","bind","setState","current","offsetWidth","componentWillUnmount","removeEventListener","componentDidUpdate","clearOldChart","createChart","fetch","credentials","then","checkStatus","response","json","responseJSON","catch","displayError","chartData","parseEventsData","chartDimensions","calculateChartDimensions","chart","createChartElement","scales","calculateScales","createXAxis","xScale","createYAxis","yScale","createTrendLine","getEventsWithResults","orderEventsByDate","calculateRollingTotalSuccessRate","filter","event","ResultName","map","EventDate","Date","sort","a","b","totalSuccesses","totalEvents","cumulativeEventsData","SuccessRate","margin","calcMargins","width","left","right","height","top","bottom","select","html","append","attr","createXScale","createYScale","scaleTime","domain","extent","d","range","scaleLinear","max","call","axisBottom","tickFormat","timeFormat","ticks","length","selectAll","style","createXAxisLabel","text","calcLabelFontSize","axisLeft","createYAxisLabel","datum","line","x","y","curve","curveCardinal","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from \"d3\";\n\nexport class SuccessRateVsTimeChart extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n\n        this.chartContainer = React.createRef();\n\n        this.state = {\n            eventsData: [],\n            chartWidth: 400\n        }\n    }\n\n    componentDidMount() {\n        this.loadEvents();\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n\n        this.setState({\n            chartWidth: this.chartContainer.current.offsetWidth\n        });\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n    }\n\n    componentDidUpdate() {\n        this.clearOldChart();\n        this.createChart();\n    }\n\n    updateDimensions() {\n        this.setState({\n            chartWidth: this.chartContainer.current.offsetWidth\n        });\n    }\n\n    loadEvents() {\n        fetch(this.GET_EVENTS_FOR_USER_URL, {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then((responseJSON) => {\n                this.setState({\n                    eventsData: responseJSON\n                });\n            })\n            .catch(this.displayError);\n    }\n\n    createChart() {\n        let chartData = this.parseEventsData();\n        let chartDimensions = this.calculateChartDimensions();\n        let chart = this.createChartElement(chartDimensions);\n        let scales = this.calculateScales(chartData, chartDimensions);\n\n        this.createXAxis(chart, chartData, chartDimensions, scales.xScale);\n        this.createYAxis(chart, chartDimensions, scales.yScale);\n        this.createTrendLine(chart, scales, chartData);\n    }\n\n    parseEventsData() {\n        let eventsData = this.getEventsWithResults();\n        eventsData = this.orderEventsByDate(eventsData);\n        eventsData = this.calculateRollingTotalSuccessRate(eventsData);\n\n        return eventsData;\n    }\n\n    getEventsWithResults() {\n        return this.state.eventsData.filter(event => event.ResultName !== \"Pending\");\n    }\n\n    orderEventsByDate(eventsData) {\n        eventsData = eventsData.map(event => {\n            event.EventDate = new Date(event.EventDate);\n            return event;\n        });\n        \n        eventsData.sort((a, b) => a.EventDate - b.EventDate);\n\n        return eventsData;\n    }\n\n    calculateRollingTotalSuccessRate(eventsData) {\n        var totalSuccesses = 0, totalEvents = 0;\n\n        var cumulativeEventsData = eventsData.map(event => {\n            if (event.ResultName === \"Success\") {\n                totalSuccesses++;\n            }\n            totalEvents++;\n            event.SuccessRate = totalSuccesses / totalEvents * 100;\n            return event;\n        });\n\n        return cumulativeEventsData;\n    }\n\n    calculateChartDimensions() {\n        let margin = this.calcMargins();\n        let width = this.state.chartWidth - margin.left - margin.right\n\n        let height = width * .75 - margin.top - margin.bottom;\n        if (this.state.chartWidth < 500) {\n            height = width * 1.2 - margin.top - margin.bottom;\n        }\n\n        return {\n            width: width,\n            height: height,\n            margin: margin\n        }\n    }\n\n    calcMargins() {\n        if (this.state.chartWidth < 500) {\n            return { top: 10, right: 60, bottom: 90, left: 45 };\n        }\n        return { top: 10, right: 60, bottom: 90, left: 60 };\n    }\n\n    clearOldChart() {\n        d3.select(\"#successRateChart\").html(\"\");\n    }\n\n    createChartElement(chartDimensions) {\n        return d3.select(\"#successRateChart\")\n            .append(\"svg\")\n            .attr(\"width\", chartDimensions.width + chartDimensions.margin.left + chartDimensions.margin.right)\n            .attr(\"height\", chartDimensions.height + chartDimensions.margin.top + chartDimensions.margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + chartDimensions.margin.left + \",\" + chartDimensions.margin.top + \")\");\n    }\n\n    calculateScales(chartData, chartDimensions) {\n        let xScale = this.createXScale(chartData, chartDimensions);\n        let yScale = this.createYScale(chartData, chartDimensions);\n\n        return {\n            xScale: xScale,\n            yScale: yScale\n        }\n    }\n\n    createXScale(cumulativeEventsData, chartDimensions) {\n        return d3.scaleTime()\n            .domain(d3.extent(cumulativeEventsData, function (d) { return d.EventDate; }))\n            .range([0, chartDimensions.width]);\n    }\n\n    createYScale(cumulativeEventsData, chartDimensions) {\n        return d3.scaleLinear()\n            .domain([0, d3.max(cumulativeEventsData, function (d) { return +d.SuccessRate; }) + 10])\n            .range([chartDimensions.height, 0]);\n    }\n\n    createXAxis(chart, cumulativeEventsData, chartDimensions, xScale) {\n        chart.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + chartDimensions.height + \")\")\n            .call(d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\")).ticks(cumulativeEventsData.length + 1))\n            .selectAll(\"text\")\n            .style(\"text-anchor\", \"end\")\n            .attr(\"dx\", \"-.8em\")\n            .attr(\"dy\", \".15em\")\n            .attr(\"transform\", \"rotate(-65)\");\n            \n        this.createXAxisLabel(chart, chartDimensions);\n    }\n\n    createXAxisLabel(chart, chartDimensions) {\n        chart.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (chartDimensions.width / 2) + \" ,\" +\n                (chartDimensions.height + chartDimensions.margin.top + chartDimensions.margin.bottom - 24) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\")\n            .attr(\"font-size\", this.calcLabelFontSize());\n    }\n\n    createYAxis(chart, chartDimensions, yScale) {\n        chart.append(\"g\")\n            .call(d3.axisLeft(yScale))\n\n        this.createYAxisLabel(chart, chartDimensions);\n    }\n\n    createYAxisLabel(chart, chartDimensions) {\n        chart.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - chartDimensions.margin.left)\n            .attr(\"x\", 0 - (chartDimensions.height / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Success Rate (%)\")\n            .attr(\"font-size\", this.calcLabelFontSize());\n    }\n\n    calcLabelFontSize() {\n        if (this.state.chartWidth < 500) {\n            return \"10px\";\n        }\n        return \"16px\";\n    }\n\n    createTrendLine(chart, scales, cumulativeEventsData) {\n        chart.append(\"path\")\n            .datum(cumulativeEventsData)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 4)\n            .attr(\"d\", d3.line()\n                .x(function (d) { return scales.xScale(d.EventDate) })\n                .y(function (d) { return scales.yScale(d.SuccessRate) })\n                .curve(d3.curveCardinal)\n            );\n    }\n\n    render() {\n        return (\n            <div ref={this.chartContainer} className=\"card-body\">\n                <h5 className=\"card-title\">Success Rate / Time</h5>\n                <div className=\"d-flex justify-content-center\" id=\"successRateChart\"></div>\n            </div>\n        );\n    }\n}\n\nexport default SuccessRateVsTimeChart;"]},"metadata":{},"sourceType":"module"}