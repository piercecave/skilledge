{"ast":null,"code":"var _jsxFileName = \"/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/ChartsPage.js\";\nimport React from 'react';\nimport './ChartsPage.css';\nimport { Header } from './Header';\nimport * as d3 from \"d3\";\nexport class ChartsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    document.title = 'Charts';\n    this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n    this.state = {\n      currentDate: new Date()\n    };\n  }\n\n  componentDidMount() {\n    this.loadEvents();\n  }\n\n  loadEvents() {\n    fetch(this.GET_EVENTS_FOR_USER_URL, {\n      credentials: 'include'\n    }).then(this.checkStatus).then(response => {\n      return response.json();\n    }).then(this.createCharts).catch(this.displayError);\n  }\n\n  createCharts(responseJSON) {\n    console.log(responseJSON); // Filter out pending events\n\n    var eventsData = responseJSON.filter(event => event.ResultName !== \"Pending\");\n    eventsData = eventsData.map(event => {\n      event.EventDate = new Date(event.EventDate);\n      return event;\n    }); // Order by date\n\n    eventsData.sort((a, b) => a.EventDate - b.EventDate); // For each event calculate rolling (total successes / total events)\n\n    var totalSuccesses = 0,\n        totalEvents = 0;\n    var cumulativeEventsData = eventsData.map(event => {\n      if (event.ResultName === \"Success\") {\n        totalSuccesses++;\n      }\n\n      totalEvents++;\n      event.SuccessRate = totalSuccesses / totalEvents * 100;\n      return event;\n    }); // Order by date\n\n    cumulativeEventsData.sort((a, b) => a.EventDate - b.EventDate); // Visualize using d3\n    // set the dimensions and margins of the graph\n\n    var margin = {\n      top: 10,\n      right: 30,\n      bottom: 90,\n      left: 60\n    },\n        width = 600 - margin.left - margin.right,\n        height = 480 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(\"#successRateChart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var x = d3.scaleTime().domain(d3.extent(cumulativeEventsData, function (d) {\n      return d.EventDate;\n    })).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\")).ticks(cumulativeEventsData.length + 1)).selectAll(\"text\").style(\"text-anchor\", \"end\").attr(\"dx\", \"-.8em\").attr(\"dy\", \".15em\").attr(\"transform\", \"rotate(-65)\"); // text label for the x axis\n\n    svg.append(\"text\").attr(\"transform\", \"translate(\" + width / 2 + \" ,\" + (height + margin.top + margin.bottom - 24) + \")\").style(\"text-anchor\", \"middle\").text(\"Date\"); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, d3.max(cumulativeEventsData, function (d) {\n      return +d.SuccessRate;\n    }) + 10]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // text label for the y axis\n\n    svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - height / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Success Rate (%)\"); // Add the line\n\n    svg.append(\"path\").datum(cumulativeEventsData).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n      return x(d.EventDate);\n    }).y(function (d) {\n      return y(d.SuccessRate);\n    }));\n  }\n\n  displayError(error) {\n    console.log(error);\n  }\n\n  formatDateForDB(currentDate) {\n    var newYear = currentDate.getFullYear();\n    var newMonth = currentDate.getMonth() + 1;\n    var newDate = currentDate.getDate();\n    if (newMonth < 10) newMonth = \"0\" + newMonth;\n    if (newDate < 10) newDate = \"0\" + newDate;\n    return newYear + \"-\" + newMonth + \"-\" + newDate;\n  }\n\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      return Promise.reject(new Error(response.status + \": \" + response.statusText));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"CalendarPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"successRateChartContainer\",\n      class: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      class: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }\n    }, \"Success Rate / Time\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"d-flex justify-content-center\",\n      id: \"successRateChart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\nexport default ChartsPage;","map":{"version":3,"sources":["/Users/roymosby/Desktop/CapstoneProject/skilledge/client/app/src/ChartsPage.js"],"names":["React","Header","d3","ChartsPage","Component","constructor","props","document","title","GET_EVENTS_FOR_USER_URL","process","env","REACT_APP_BACKEND_URL","state","currentDate","Date","componentDidMount","loadEvents","fetch","credentials","then","checkStatus","response","json","createCharts","catch","displayError","responseJSON","console","log","eventsData","filter","event","ResultName","map","EventDate","sort","a","b","totalSuccesses","totalEvents","cumulativeEventsData","SuccessRate","margin","top","right","bottom","left","width","height","svg","select","append","attr","x","scaleTime","domain","extent","d","range","call","axisBottom","tickFormat","timeFormat","ticks","length","selectAll","style","text","y","scaleLinear","max","axisLeft","datum","line","error","formatDateForDB","newYear","getFullYear","newMonth","getMonth","newDate","getDate","status","Promise","reject","Error","statusText","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,OAAO,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAE5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEAC,IAAAA,QAAQ,CAACC,KAAT,GAAiB,QAAjB;AAEA,SAAKC,uBAAL,GAA+BC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAoC,eAAnE;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,IAAIC,IAAJ;AADJ,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AAETC,IAAAA,KAAK,CAAC,KAAKT,uBAAN,EAA+B;AAChCU,MAAAA,WAAW,EAAE;AADmB,KAA/B,CAAL,CAGKC,IAHL,CAGU,KAAKC,WAHf,EAIKD,IAJL,CAIWE,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KANL,EAOKH,IAPL,CAOU,KAAKI,YAPf,EAQKC,KARL,CAQW,KAAKC,YARhB;AASH;;AAEDF,EAAAA,YAAY,CAACG,YAAD,EAAe;AAEvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAFuB,CAIvB;;AACA,QAAIG,UAAU,GAAGH,YAAY,CAACI,MAAb,CAAoBC,KAAK,IAAIA,KAAK,CAACC,UAAN,KAAqB,SAAlD,CAAjB;AAEAH,IAAAA,UAAU,GAAGA,UAAU,CAACI,GAAX,CAAeF,KAAK,IAAI;AACjCA,MAAAA,KAAK,CAACG,SAAN,GAAkB,IAAIpB,IAAJ,CAASiB,KAAK,CAACG,SAAf,CAAlB;AACA,aAAOH,KAAP;AACH,KAHY,CAAb,CAPuB,CAYvB;;AACAF,IAAAA,UAAU,CAACM,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,SAAF,GAAcG,CAAC,CAACH,SAA1C,EAbuB,CAevB;;AACA,QAAII,cAAc,GAAG,CAArB;AAAA,QAAwBC,WAAW,GAAG,CAAtC;AACA,QAAIC,oBAAoB,GAAGX,UAAU,CAACI,GAAX,CAAeF,KAAK,IAAI;AAC/C,UAAIA,KAAK,CAACC,UAAN,KAAqB,SAAzB,EAAoC;AAChCM,QAAAA,cAAc;AACjB;;AACDC,MAAAA,WAAW;AACXR,MAAAA,KAAK,CAACU,WAAN,GAAoBH,cAAc,GAAGC,WAAjB,GAA+B,GAAnD;AACA,aAAOR,KAAP;AACH,KAP0B,CAA3B,CAjBuB,CA0BvB;;AACAS,IAAAA,oBAAoB,CAACL,IAArB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,SAAF,GAAcG,CAAC,CAACH,SAApD,EA3BuB,CA6BvB;AAEA;;AACA,QAAIQ,MAAM,GAAG;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,MAAM,EAAE,EAA9B;AAAkCC,MAAAA,IAAI,EAAE;AAAxC,KAAb;AAAA,QACIC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADvC;AAAA,QAEII,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFvC,CAhCuB,CAoCvB;;AACA,QAAII,GAAG,GAAGhD,EAAE,CAACiD,MAAH,CAAU,mBAAV,EACLC,MADK,CACE,KADF,EAELC,IAFK,CAEA,OAFA,EAESL,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KAFtC,EAGLQ,IAHK,CAGA,QAHA,EAGUJ,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAHvC,EAILM,MAJK,CAIE,GAJF,EAKLC,IALK,CAKA,WALA,EAMF,eAAeV,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GAN9C,CAAV;AAQA,QAAIU,CAAC,GAAGpD,EAAE,CAACqD,SAAH,GACHC,MADG,CACItD,EAAE,CAACuD,MAAH,CAAUhB,oBAAV,EAAgC,UAAUiB,CAAV,EAAa;AAAE,aAAOA,CAAC,CAACvB,SAAT;AAAqB,KAApE,CADJ,EAEHwB,KAFG,CAEG,CAAC,CAAD,EAAIX,KAAJ,CAFH,CAAR;AAGAE,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,WADV,EACuB,iBAAiBJ,MAAjB,GAA0B,GADjD,EAEKW,IAFL,CAEU1D,EAAE,CAAC2D,UAAH,CAAcP,CAAd,EAAiBQ,UAAjB,CAA4B5D,EAAE,CAAC6D,UAAH,CAAc,UAAd,CAA5B,EAAuDC,KAAvD,CAA6DvB,oBAAoB,CAACwB,MAArB,GAA8B,CAA3F,CAFV,EAGKC,SAHL,CAGe,MAHf,EAIKC,KAJL,CAIW,aAJX,EAI0B,KAJ1B,EAKKd,IALL,CAKU,IALV,EAKgB,OALhB,EAMKA,IANL,CAMU,IANV,EAMgB,OANhB,EAOKA,IAPL,CAOU,WAPV,EAOuB,aAPvB,EAhDuB,CAyDvB;;AACAH,IAAAA,GAAG,CAACE,MAAJ,CAAW,MAAX,EACKC,IADL,CACU,WADV,EAEQ,eAAgBL,KAAK,GAAG,CAAxB,GAA6B,IAA7B,IACCC,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAA7B,GAAsC,EADvC,IAC6C,GAHrD,EAIKqB,KAJL,CAIW,aAJX,EAI0B,QAJ1B,EAKKC,IALL,CAKU,MALV,EA1DuB,CAiEvB;;AACA,QAAIC,CAAC,GAAGnE,EAAE,CAACoE,WAAH,GACHd,MADG,CACI,CAAC,CAAD,EAAItD,EAAE,CAACqE,GAAH,CAAO9B,oBAAP,EAA6B,UAAUiB,CAAV,EAAa;AAAE,aAAO,CAACA,CAAC,CAAChB,WAAV;AAAwB,KAApE,IAAwE,EAA5E,CADJ,EAEHiB,KAFG,CAEG,CAACV,MAAD,EAAS,CAAT,CAFH,CAAR;AAGAC,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACKQ,IADL,CACU1D,EAAE,CAACsE,QAAH,CAAYH,CAAZ,CADV,EArEuB,CAwEvB;;AACAnB,IAAAA,GAAG,CAACE,MAAJ,CAAW,MAAX,EACKC,IADL,CACU,WADV,EACuB,aADvB,EAEKA,IAFL,CAEU,GAFV,EAEe,IAAIV,MAAM,CAACI,IAF1B,EAGKM,IAHL,CAGU,GAHV,EAGe,IAAKJ,MAAM,GAAG,CAH7B,EAIKI,IAJL,CAIU,IAJV,EAIgB,KAJhB,EAKKc,KALL,CAKW,aALX,EAK0B,QAL1B,EAMKC,IANL,CAMU,kBANV,EAzEuB,CAiFvB;;AACAlB,IAAAA,GAAG,CAACE,MAAJ,CAAW,MAAX,EACKqB,KADL,CACWhC,oBADX,EAEKY,IAFL,CAEU,MAFV,EAEkB,MAFlB,EAGKA,IAHL,CAGU,QAHV,EAGoB,WAHpB,EAIKA,IAJL,CAIU,cAJV,EAI0B,GAJ1B,EAKKA,IALL,CAKU,GALV,EAKenD,EAAE,CAACwE,IAAH,GACNpB,CADM,CACJ,UAAUI,CAAV,EAAa;AAAE,aAAOJ,CAAC,CAACI,CAAC,CAACvB,SAAH,CAAR;AAAuB,KADlC,EAENkC,CAFM,CAEJ,UAAUX,CAAV,EAAa;AAAE,aAAOW,CAAC,CAACX,CAAC,CAAChB,WAAH,CAAR;AAAyB,KAFpC,CALf;AASH;;AAEDhB,EAAAA,YAAY,CAACiD,KAAD,EAAQ;AAChB/C,IAAAA,OAAO,CAACC,GAAR,CAAY8C,KAAZ;AACH;;AAEDC,EAAAA,eAAe,CAAC9D,WAAD,EAAc;AACzB,QAAI+D,OAAO,GAAG/D,WAAW,CAACgE,WAAZ,EAAd;AACA,QAAIC,QAAQ,GAAGjE,WAAW,CAACkE,QAAZ,KAAyB,CAAxC;AACA,QAAIC,OAAO,GAAGnE,WAAW,CAACoE,OAAZ,EAAd;AACA,QAAIH,QAAQ,GAAG,EAAf,EAAmBA,QAAQ,GAAG,MAAMA,QAAjB;AACnB,QAAIE,OAAO,GAAG,EAAd,EAAkBA,OAAO,GAAG,MAAMA,OAAhB;AAClB,WAAOJ,OAAO,GAAG,GAAV,GAAgBE,QAAhB,GAA2B,GAA3B,GAAiCE,OAAxC;AACH;;AAED5D,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,QAAIA,QAAQ,CAAC6D,MAAT,IAAmB,GAAnB,IAA0B7D,QAAQ,CAAC6D,MAAT,GAAkB,GAAhD,EAAqD;AACjD,aAAO7D,QAAP;AACH,KAFD,MAEO;AACH,aAAO8D,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUhE,QAAQ,CAAC6D,MAAT,GAAkB,IAAlB,GAAyB7D,QAAQ,CAACiE,UAA5C,CAAf,CAAP;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAK,MAAA,EAAE,EAAC,2BAAR;AAAoC,MAAA,KAAK,EAAC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,KAAK,EAAC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,eAEI;AAAK,MAAA,KAAK,EAAC,+BAAX;AAA2C,MAAA,EAAE,EAAC,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,CADJ,CAFJ,CADJ;AAaH;;AA/J2C;AAkKhD,eAAerF,UAAf","sourcesContent":["import React from 'react';\nimport './ChartsPage.css';\nimport { Header } from './Header';\nimport * as d3 from \"d3\";\n\nexport class ChartsPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        document.title = 'Charts';\n\n        this.GET_EVENTS_FOR_USER_URL = process.env.REACT_APP_BACKEND_URL + \"/users/events\";\n\n        this.state = {\n            currentDate: new Date()\n        }\n    }\n\n    componentDidMount() {\n        this.loadEvents();\n    }\n\n    loadEvents() {\n\n        fetch(this.GET_EVENTS_FOR_USER_URL, {\n            credentials: 'include'\n        })\n            .then(this.checkStatus)\n            .then((response) => {\n                return response.json();\n            })\n            .then(this.createCharts)\n            .catch(this.displayError);\n    }\n\n    createCharts(responseJSON) {\n\n        console.log(responseJSON);\n\n        // Filter out pending events\n        var eventsData = responseJSON.filter(event => event.ResultName !== \"Pending\");\n\n        eventsData = eventsData.map(event => {\n            event.EventDate = new Date(event.EventDate);\n            return event;\n        });\n\n        // Order by date\n        eventsData.sort((a, b) => a.EventDate - b.EventDate);\n\n        // For each event calculate rolling (total successes / total events)\n        var totalSuccesses = 0, totalEvents = 0;\n        var cumulativeEventsData = eventsData.map(event => {\n            if (event.ResultName === \"Success\") {\n                totalSuccesses++;\n            }\n            totalEvents++;\n            event.SuccessRate = totalSuccesses / totalEvents * 100;\n            return event;\n        });\n\n        // Order by date\n        cumulativeEventsData.sort((a, b) => a.EventDate - b.EventDate);\n\n        // Visualize using d3\n\n        // set the dimensions and margins of the graph\n        var margin = { top: 10, right: 30, bottom: 90, left: 60 },\n            width = 600 - margin.left - margin.right,\n            height = 480 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(\"#successRateChart\")\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        var x = d3.scaleTime()\n            .domain(d3.extent(cumulativeEventsData, function (d) { return d.EventDate; }))\n            .range([0, width]);\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\")).ticks(cumulativeEventsData.length + 1))\n            .selectAll(\"text\")\n            .style(\"text-anchor\", \"end\")\n            .attr(\"dx\", \"-.8em\")\n            .attr(\"dy\", \".15em\")\n            .attr(\"transform\", \"rotate(-65)\");\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (width / 2) + \" ,\" +\n                (height + margin.top + margin.bottom - 24) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n\n        // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, d3.max(cumulativeEventsData, function (d) { return +d.SuccessRate; }) + 10])\n            .range([height, 0]);\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Success Rate (%)\");\n\n        // Add the line\n        svg.append(\"path\")\n            .datum(cumulativeEventsData)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", d3.line()\n                .x(function (d) { return x(d.EventDate) })\n                .y(function (d) { return y(d.SuccessRate) })\n            )\n    }\n\n    displayError(error) {\n        console.log(error);\n    }\n\n    formatDateForDB(currentDate) {\n        var newYear = currentDate.getFullYear();\n        var newMonth = currentDate.getMonth() + 1;\n        var newDate = currentDate.getDate();\n        if (newMonth < 10) newMonth = \"0\" + newMonth;\n        if (newDate < 10) newDate = \"0\" + newDate;\n        return newYear + \"-\" + newMonth + \"-\" + newDate;\n    }\n\n    checkStatus(response) {\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        } else {\n            return Promise.reject(new Error(response.status + \": \" + response.statusText));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"CalendarPage\">\n                <Header />\n                <div id=\"successRateChartContainer\" class=\"container\">\n                    <div class=\"card my-3\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Success Rate / Time</h5>\n                            <div class=\"d-flex justify-content-center\" id=\"successRateChart\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ChartsPage;"]},"metadata":{},"sourceType":"module"}